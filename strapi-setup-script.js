// Script –∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ Content Types –≤ –ª–æ–∫–∞–ª–µ–Ω Strapi
// –ò–∑–ø—ä–ª–Ω–∏ —Å: node strapi-setup-script.js

const STRAPI_URL = 'http://127.0.0.1:1337';
const API_TOKEN = '076d680706abf17d1baeb8c86597c6f006aa82537b94726eb219d12caa056b729554866dc5408827d6d027a8bc7330a125788f8048574eaa38daea1a586ecf5f728bb6d294509d68c26b3c8574811c7c632b32d90096d2250d55e1da7fbcb1f75f92d4ba6b07e3121078003fa7cfe982b79965ddb074c001591714ed7057ea7b';

async function makeRequest(endpoint, method = 'GET', data = null) {
  const options = {
    method,
    headers: {
      'Authorization': `Bearer ${API_TOKEN}`,
      'Content-Type': 'application/json',
    },
  };

  if (data) {
    options.body = JSON.stringify(data);
  }

  try {
    const response = await fetch(`${STRAPI_URL}${endpoint}`, options);
    const result = await response.json();
    
    if (!response.ok) {
      console.error(`–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ ${method} ${endpoint}:`, result);
      return null;
    }
    
    return result;
  } catch (error) {
    console.error(`Network –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ ${endpoint}:`, error.message);
    return null;
  }
}

// 1. –°—ä–∑–¥–∞–≤–∞–º–µ SEO Component –ø—ä—Ä–≤–æ
async function createSEOComponent() {
  console.log('–°—ä–∑–¥–∞–≤–∞–º SEO Component...');
  
  const seoComponent = {
    component: {
      displayName: 'SEO',
      category: 'shared',
      attributes: {
        meta_title: {
          type: 'string',
          maxLength: 60,
        },
        meta_description: {
          type: 'text',
          maxLength: 160,
        },
        keywords: {
          type: 'string',
        },
        canonical_url: {
          type: 'string',
        },
        og_title: {
          type: 'string',
          maxLength: 60,
        },
        og_description: {
          type: 'text',
          maxLength: 160,
        },
        og_image: {
          type: 'media',
          multiple: false,
          allowedTypes: ['images'],
        },
        no_index: {
          type: 'boolean',
          default: false,
        },
      },
    },
  };

  return await makeRequest('/api/content-type-builder/components', 'POST', seoComponent);
}

// 2. –°—ä–∑–¥–∞–≤–∞–º–µ Pages Content Type
async function createPagesContentType() {
  console.log('–°—ä–∑–¥–∞–≤–∞–º Pages Content Type...');
  
  const pagesContentType = {
    contentType: {
      kind: 'collectionType',
      collectionName: 'pages',
      info: {
        singularName: 'page',
        pluralName: 'pages',
        displayName: 'Pages',
        description: '–°—Ç—Ä–∞–Ω–∏—Ü–∏ –Ω–∞ —Å–∞–π—Ç–∞',
      },
      options: {
        draftAndPublish: true,
      },
      attributes: {
        title: {
          type: 'string',
          required: true,
        },
        slug: {
          type: 'uid',
          targetField: 'title',
          required: true,
        },
        content: {
          type: 'richtext',
        },
        excerpt: {
          type: 'text',
          maxLength: 200,
        },
        seo: {
          type: 'component',
          repeatable: false,
          component: 'shared.seo',
        },
        featured_image: {
          type: 'media',
          multiple: false,
          allowedTypes: ['images'],
        },
      },
    },
  };

  return await makeRequest('/api/content-type-builder/content-types', 'POST', pagesContentType);
}

// 3. –°—ä–∑–¥–∞–≤–∞–º–µ Services Content Type
async function createServicesContentType() {
  console.log('–°—ä–∑–¥–∞–≤–∞–º Services Content Type...');
  
  const servicesContentType = {
    contentType: {
      kind: 'collectionType',
      collectionName: 'services',
      info: {
        singularName: 'service',
        pluralName: 'services',
        displayName: 'Services',
        description: '–£—Å–ª—É–≥–∏ –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è—Ç–∞',
      },
      options: {
        draftAndPublish: true,
      },
      attributes: {
        name: {
          type: 'string',
          required: true,
        },
        slug: {
          type: 'uid',
          targetField: 'name',
          required: true,
        },
        description: {
          type: 'richtext',
        },
        short_description: {
          type: 'text',
          maxLength: 300,
        },
        price: {
          type: 'string',
        },
        features: {
          type: 'json',
        },
        icon: {
          type: 'string',
        },
        seo: {
          type: 'component',
          repeatable: false,
          component: 'shared.seo',
        },
      },
    },
  };

  return await makeRequest('/api/content-type-builder/content-types', 'POST', servicesContentType);
}

// 4. –°—ä–∑–¥–∞–≤–∞–º–µ Blog Posts Content Type
async function createBlogPostsContentType() {
  console.log('–°—ä–∑–¥–∞–≤–∞–º Blog Posts Content Type...');
  
  const blogPostsContentType = {
    contentType: {
      kind: 'collectionType',
      collectionName: 'blog_posts',
      info: {
        singularName: 'blog-post',
        pluralName: 'blog-posts',
        displayName: 'Blog Posts',
        description: '–ë–ª–æ–≥ —Å—Ç–∞—Ç–∏–∏',
      },
      options: {
        draftAndPublish: true,
      },
      attributes: {
        title: {
          type: 'string',
          required: true,
        },
        slug: {
          type: 'uid',
          targetField: 'title',
          required: true,
        },
        content: {
          type: 'richtext',
        },
        excerpt: {
          type: 'text',
          maxLength: 300,
        },
        author: {
          type: 'string',
          default: 'Pravda ST',
        },
        published_at: {
          type: 'datetime',
        },
        featured_image: {
          type: 'media',
          multiple: false,
          allowedTypes: ['images'],
        },
        tags: {
          type: 'json',
        },
        seo: {
          type: 'component',
          repeatable: false,
          component: 'shared.seo',
        },
      },
    },
  };

  return await makeRequest('/api/content-type-builder/content-types', 'POST', blogPostsContentType);
}

// 5. –°—ä–∑–¥–∞–≤–∞–º–µ Contact Messages Content Type
async function createContactMessagesContentType() {
  console.log('–°—ä–∑–¥–∞–≤–∞–º Contact Messages Content Type...');
  
  const contactMessagesContentType = {
    contentType: {
      kind: 'collectionType',
      collectionName: 'contact_messages',
      info: {
        singularName: 'contact-message',
        pluralName: 'contact-messages',
        displayName: 'Contact Messages',
        description: '–°—ä–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞',
      },
      options: {
        draftAndPublish: false,
      },
      attributes: {
        name: {
          type: 'string',
          required: true,
        },
        email: {
          type: 'email',
          required: true,
        },
        phone: {
          type: 'string',
        },
        company: {
          type: 'string',
        },
        message: {
          type: 'text',
          required: true,
        },
        service_interest: {
          type: 'string',
        },
        status: {
          type: 'enumeration',
          enum: ['new', 'contacted', 'converted'],
          default: 'new',
        },
      },
    },
  };

  return await makeRequest('/api/content-type-builder/content-types', 'POST', contactMessagesContentType);
}

// –ì–ª–∞–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ
async function setupStrapi() {
  console.log('üöÄ –ó–∞–ø–æ—á–≤–∞–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ Strapi Content Types...\n');

  // –¢–µ—Å—Ç–≤–∞–º–µ –≤—Ä—ä–∑–∫–∞—Ç–∞
  console.log('–¢–µ—Å—Ç–≤–∞–º –≤—Ä—ä–∑–∫–∞—Ç–∞ —Å—ä—Å Strapi...');
  const healthCheck = await makeRequest('/api');
  if (!healthCheck) {
    console.error('‚ùå –ù–µ –º–æ–≥–∞ –¥–∞ —Å–µ —Å–≤—ä—Ä–∂–∞ —Å—ä—Å Strapi. –ú–æ–ª—è —Å—Ç–∞—Ä—Ç–∏—Ä–∞–π –ª–æ–∫–∞–ª–Ω–∏—è Strapi –Ω–∞ –ø–æ—Ä—Ç 1337');
    return;
  }
  console.log('‚úÖ –í—Ä—ä–∑–∫–∞—Ç–∞ —Å—ä—Å Strapi —É—Å–ø–µ—à–Ω–∞\n');

  // –°—ä–∑–¥–∞–≤–∞–º–µ Content Types –≤ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–æ—Å—Ç
  const results = [];
  
  // 1. SEO Component (–ø—ä—Ä–≤–æ)
  results.push(await createSEOComponent());
  
  // –ú–∞–ª–∫–∞ –ø–∞—É–∑–∞ –∑–∞ –¥–∞ —Å–µ –æ–±—Ä–∞–±–æ—Ç–∏
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  // 2. –û—Å—Ç–∞–Ω–∞–ª–∏—Ç–µ Content Types
  results.push(await createPagesContentType());
  results.push(await createServicesContentType());
  results.push(await createBlogPostsContentType());
  results.push(await createContactMessagesContentType());

  // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
  const successful = results.filter(result => result !== null).length;
  const total = results.length;

  console.log(`\nüìä –†–µ–∑—É–ª—Ç–∞—Ç–∏: ${successful}/${total} Content Types —Å—ä–∑–¥–∞–¥–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ`);
  
  if (successful === total) {
    console.log('üéâ –í—Å–∏—á–∫–∏ Content Types —Å–∞ —Å—ä–∑–¥–∞–¥–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìù –°–ª–µ–¥–≤–∞—â–∏ —Å—Ç—ä–ø–∫–∏:');
    console.log('1. –û—Ç–≤–æ—Ä–∏ Strapi Admin: http://localhost:1337/admin');
    console.log('2. –ù–∞—Å—Ç—Ä–æ–π Permissions –≤ Settings > Roles > Public');
    console.log('3. –î–æ–±–∞–≤–∏ –º–∞–ª–∫–æ —Ç–µ—Å—Ç–æ–≤–æ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ');
    console.log('4. –¢–µ—Å—Ç–≤–∞–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è—Ç–∞ –≤ /strapi-test');
  } else {
    console.log('‚ö†Ô∏è  –ù—è–∫–æ–∏ Content Types –Ω–µ —Å–∞ —Å—ä–∑–¥–∞–¥–µ–Ω–∏. –ü—Ä–æ–≤–µ—Ä–∏ –≥—Ä–µ—à–∫–∏—Ç–µ –ø–æ-–≥–æ—Ä–µ.');
  }
}

// –ò–∑–ø—ä–ª–Ω–∏ setup
setupStrapi().catch(console.error);